/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.parks;

import br.com.parks.entity.OLT;
import br.com.parks.entity.ONU;
import br.com.parks.util.ControllerOlt;
import br.com.parks.util.ControllerOnu;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.SwingConstants;

/**
 *
 * @author tiago
 */
public class OnuPanel extends javax.swing.JPanel {

    private ExecutorService svc = Executors.newFixedThreadPool(1);
    private final JTabbedPane panel;
    private ControllerOnu cOnu;
    private ControllerOlt cOlt;
    private ONU onu;
    private OLT olt;
    private boolean connected = false;
    private boolean stopOnu = true;

    /**
     * Creates new form OnuPanel
     *
     * @param panel
     */
    public OnuPanel(JTabbedPane panel) {
        this.panel = panel;
        initComponents();
    }

    public OnuPanel(JTabbedPane panel, final ONU onu, OLT olt) {
        this.panel = panel;
        initComponents();
        this.onu = onu;
        this.olt = olt;
        cOnu = new ControllerOnu(onu);

        fillFields();
        if (onu.isBridge()) {
            ckbBridge.setSelected(true);
            setDefaultPanelBridge(true);
        } else {
            setDefaultPanelRoute(true);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPass = new javax.swing.JPasswordField();
        lbSerial = new javax.swing.JLabel();
        txtSerial = new javax.swing.JTextField();
        lbPass = new javax.swing.JLabel();
        pnOnuProv = new javax.swing.JPanel();
        txtAlias = new javax.swing.JTextField();
        lbAlias = new javax.swing.JLabel();
        lbMgmtIP = new javax.swing.JLabel();
        txtMgmtIP = new javax.swing.JTextField();
        cbFlowProfile = new javax.swing.JComboBox();
        lbFlowProfile = new javax.swing.JLabel();
        lbVtpIpHost = new javax.swing.JLabel();
        cbVtpIpHost = new javax.swing.JComboBox();
        cbVtpVeip = new javax.swing.JComboBox();
        lbVtpVeip = new javax.swing.JLabel();
        cbVtpPbmp = new javax.swing.JComboBox();
        lbVtpPbmp = new javax.swing.JLabel();
        btProvisioning = new javax.swing.JButton();
        ckbBridge = new javax.swing.JCheckBox();
        btReload = new javax.swing.JButton();
        pnOnuConf = new javax.swing.JPanel();
        txtLanIp = new javax.swing.JTextField();
        lbLanIp = new javax.swing.JLabel();
        txtDhcpRangeFirst = new javax.swing.JTextField();
        txtDhcpRangeLast = new javax.swing.JTextField();
        lbDhcpRangeLast = new javax.swing.JLabel();
        ckbNat = new javax.swing.JCheckBox();
        ckbDhcpWan = new javax.swing.JCheckBox();
        lbWanIp = new javax.swing.JLabel();
        btConfig = new javax.swing.JButton();
        txtWanIpAddress = new javax.swing.JTextField();
        txtDefaultGw = new javax.swing.JTextField();
        lbDefaultGw = new javax.swing.JLabel();
        ckbPppoe = new javax.swing.JCheckBox();
        lbPppoeUser = new javax.swing.JLabel();
        lbPppoePass = new javax.swing.JLabel();
        txtPppoeUser = new javax.swing.JTextField();
        txtPppoePass = new javax.swing.JPasswordField();
        ckbDhcpRange = new javax.swing.JCheckBox();
        btProvisioningAndConfig = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        btRemoveOnu = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(669, 483));

        txtPass.setText("parks");

        lbSerial.setText("Serial:");

        txtSerial.setEditable(false);
        txtSerial.setBackground(new java.awt.Color(176, 176, 176));
        txtSerial.setForeground(new java.awt.Color(109, 109, 109));
        txtSerial.setEnabled(false);
        txtSerial.setSelectedTextColor(new java.awt.Color(195, 195, 195));

        lbPass.setText("Pass:");

        pnOnuProv.setBorder(javax.swing.BorderFactory.createTitledBorder("ONU Provisioning"));

        lbAlias.setText("Alias:");

        lbMgmtIP.setText("Mgmt IP:");

        cbFlowProfile.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--" }));
        cbFlowProfile.setEnabled(false);

        lbFlowProfile.setText("Flow Profile:");

        lbVtpIpHost.setText("VTP IPHOST:");

        cbVtpIpHost.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--" }));
        cbVtpIpHost.setEnabled(false);

        cbVtpVeip.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--" }));
        cbVtpVeip.setEnabled(false);

        lbVtpVeip.setText("VTP VEIP:");

        cbVtpPbmp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--" }));
        cbVtpPbmp.setEnabled(false);

        lbVtpPbmp.setText("VTP PBMP:");

        btProvisioning.setText("Provisioning");
        btProvisioning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btProvisioningActionPerformed(evt);
            }
        });

        ckbBridge.setText("Bridge");
        ckbBridge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbBridgeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnOnuProvLayout = new javax.swing.GroupLayout(pnOnuProv);
        pnOnuProv.setLayout(pnOnuProvLayout);
        pnOnuProvLayout.setHorizontalGroup(
            pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOnuProvLayout.createSequentialGroup()
                .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnOnuProvLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbVtpPbmp)
                            .addGroup(pnOnuProvLayout.createSequentialGroup()
                                .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbMgmtIP)
                                    .addComponent(lbAlias))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnOnuProvLayout.createSequentialGroup()
                                        .addComponent(ckbBridge)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbVtpVeip))
                                    .addGroup(pnOnuProvLayout.createSequentialGroup()
                                        .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtMgmtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lbFlowProfile)
                                            .addComponent(lbVtpIpHost))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbVtpPbmp, 0, 228, Short.MAX_VALUE)
                            .addComponent(cbVtpVeip, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbFlowProfile, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbVtpIpHost, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnOnuProvLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btProvisioning)))
                .addContainerGap())
        );
        pnOnuProvLayout.setVerticalGroup(
            pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOnuProvLayout.createSequentialGroup()
                .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbAlias)
                    .addComponent(cbFlowProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbFlowProfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMgmtIP)
                    .addComponent(lbVtpIpHost)
                    .addComponent(cbVtpIpHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMgmtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbVtpVeip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbVtpVeip)
                    .addComponent(ckbBridge))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnOnuProvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbVtpPbmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbVtpPbmp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btProvisioning)
                .addContainerGap())
        );

        btReload.setText("Reload");
        btReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btReloadActionPerformed(evt);
            }
        });

        pnOnuConf.setBorder(javax.swing.BorderFactory.createTitledBorder("ONU Config"));

        lbLanIp.setText("LAN IP:");

        txtDhcpRangeFirst.setEnabled(false);

        txtDhcpRangeLast.setEnabled(false);

        lbDhcpRangeLast.setText("Last IP Range:");

        ckbNat.setText("NAT");

        ckbDhcpWan.setText("DHCP WAN");
        ckbDhcpWan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbDhcpWanActionPerformed(evt);
            }
        });

        lbWanIp.setText("WAN IP:");

        btConfig.setText("Config");

        lbDefaultGw.setText("Def. GW:");

        ckbPppoe.setText("PPPoE");
        ckbPppoe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbPppoeActionPerformed(evt);
            }
        });

        lbPppoeUser.setText("User:");

        lbPppoePass.setText("Pass:");

        txtPppoeUser.setEnabled(false);

        txtPppoePass.setEnabled(false);

        ckbDhcpRange.setHorizontalTextPosition(SwingConstants.LEFT);
        ckbDhcpRange.setText("DHCP Range");
        ckbDhcpRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbDhcpRangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnOnuConfLayout = new javax.swing.GroupLayout(pnOnuConf);
        pnOnuConf.setLayout(pnOnuConfLayout);
        pnOnuConfLayout.setHorizontalGroup(
            pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOnuConfLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbWanIp)
                    .addComponent(lbDefaultGw)
                    .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ckbNat)
                        .addComponent(lbLanIp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnOnuConfLayout.createSequentialGroup()
                        .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnOnuConfLayout.createSequentialGroup()
                                .addComponent(ckbDhcpWan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ckbPppoe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbDhcpRangeLast))
                            .addGroup(pnOnuConfLayout.createSequentialGroup()
                                .addComponent(txtLanIp, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(ckbDhcpRange)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDhcpRangeLast, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(txtDhcpRangeFirst)))
                    .addGroup(pnOnuConfLayout.createSequentialGroup()
                        .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDefaultGw, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(txtWanIpAddress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnOnuConfLayout.createSequentialGroup()
                                .addComponent(lbPppoeUser)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPppoeUser))
                            .addGroup(pnOnuConfLayout.createSequentialGroup()
                                .addComponent(lbPppoePass)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPppoePass, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(btConfig)))
                .addContainerGap())
        );
        pnOnuConfLayout.setVerticalGroup(
            pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOnuConfLayout.createSequentialGroup()
                .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbLanIp)
                    .addComponent(txtLanIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDhcpRangeFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckbDhcpRange))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDhcpRangeLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDhcpRangeLast)
                    .addComponent(ckbNat)
                    .addComponent(ckbDhcpWan)
                    .addComponent(ckbPppoe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbWanIp)
                    .addComponent(txtWanIpAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPppoeUser)
                    .addComponent(txtPppoeUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnOnuConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDefaultGw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDefaultGw)
                    .addComponent(lbPppoePass)
                    .addComponent(txtPppoePass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btConfig))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btProvisioningAndConfig.setText("Provisioning+Config");

        btClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/DeleteRed2.png"))); // NOI18N
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });

        btRemoveOnu.setText("Remove ONU");
        btRemoveOnu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveOnuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnOnuConf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnOnuProv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbSerial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbPass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btReload))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btProvisioningAndConfig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btRemoveOnu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btClose, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbSerial)
                    .addComponent(txtSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPass)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btReload))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnOnuProv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnOnuConf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btProvisioningAndConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btRemoveOnu))
                    .addComponent(btClose, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCloseActionPerformed
        stopOnu = false;
    }//GEN-LAST:event_btCloseActionPerformed

    private void btReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btReloadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btReloadActionPerformed

    private void ckbDhcpRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbDhcpRangeActionPerformed
        if (ckbDhcpRange.isSelected()) {
            txtDhcpRangeFirst.setEnabled(true);
            txtDhcpRangeLast.setEnabled(true);
        } else {
            txtDhcpRangeFirst.setEnabled(false);
            txtDhcpRangeLast.setEnabled(false);
        }
    }//GEN-LAST:event_ckbDhcpRangeActionPerformed

    private void ckbPppoeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbPppoeActionPerformed
        if (ckbPppoe.isSelected()) {
            setPppoe(true);
        } else {
            setPppoe(false);
        }
    }//GEN-LAST:event_ckbPppoeActionPerformed

    private void ckbDhcpWanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbDhcpWanActionPerformed
        if (ckbDhcpWan.isSelected()) {
            setDhcpWan(true);
        } else {
            setDhcpWan(false);
        }
    }//GEN-LAST:event_ckbDhcpWanActionPerformed

    private void ckbBridgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbBridgeActionPerformed
        if (ckbBridge.isSelected()) {
            setDefaultPanelBridge(true);
        } else {
            setDefaultPanelRoute(true);
        }
    }//GEN-LAST:event_ckbBridgeActionPerformed

    private void btRemoveOnuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveOnuActionPerformed
        cOlt = new ControllerOlt(olt.getIpAccess(), olt.getUser(), olt.getPass());
        cOlt.connect();
        cOlt.removeOnu(onu);
        cOlt.disconnect();
    }//GEN-LAST:event_btRemoveOnuActionPerformed

    private void btProvisioningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btProvisioningActionPerformed
        ONU ponu = new ONU(onu.getIndex(), onu.getSerial(), onu.getIfGpon());
        if (!onu.isBridge()) {
            onu.setAlias(txtAlias.getText());
            onu.setMgmtIp(txtMgmtIP.getText());
        }


    }//GEN-LAST:event_btProvisioningActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClose;
    private javax.swing.JButton btConfig;
    private javax.swing.JButton btProvisioning;
    private javax.swing.JButton btProvisioningAndConfig;
    private javax.swing.JButton btReload;
    private javax.swing.JButton btRemoveOnu;
    private javax.swing.JComboBox cbFlowProfile;
    private javax.swing.JComboBox cbVtpIpHost;
    private javax.swing.JComboBox cbVtpPbmp;
    private javax.swing.JComboBox cbVtpVeip;
    private javax.swing.JCheckBox ckbBridge;
    private javax.swing.JCheckBox ckbDhcpRange;
    private javax.swing.JCheckBox ckbDhcpWan;
    private javax.swing.JCheckBox ckbNat;
    private javax.swing.JCheckBox ckbPppoe;
    private javax.swing.JLabel lbAlias;
    private javax.swing.JLabel lbDefaultGw;
    private javax.swing.JLabel lbDhcpRangeLast;
    private javax.swing.JLabel lbFlowProfile;
    private javax.swing.JLabel lbLanIp;
    private javax.swing.JLabel lbMgmtIP;
    private javax.swing.JLabel lbPass;
    private javax.swing.JLabel lbPppoePass;
    private javax.swing.JLabel lbPppoeUser;
    private javax.swing.JLabel lbSerial;
    private javax.swing.JLabel lbVtpIpHost;
    private javax.swing.JLabel lbVtpPbmp;
    private javax.swing.JLabel lbVtpVeip;
    private javax.swing.JLabel lbWanIp;
    private javax.swing.JPanel pnOnuConf;
    private javax.swing.JPanel pnOnuProv;
    private javax.swing.JTextField txtAlias;
    private javax.swing.JTextField txtDefaultGw;
    private javax.swing.JTextField txtDhcpRangeFirst;
    private javax.swing.JTextField txtDhcpRangeLast;
    private javax.swing.JTextField txtLanIp;
    private javax.swing.JTextField txtMgmtIP;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JPasswordField txtPppoePass;
    private javax.swing.JTextField txtPppoeUser;
    private javax.swing.JTextField txtSerial;
    private javax.swing.JTextField txtWanIpAddress;
    // End of variables declaration//GEN-END:variables

    private void fillFields() {
        txtSerial.setText(onu.getSerial());
        txtAlias.setText(onu.getAlias());
        txtMgmtIP.setText(onu.getMgmtIp());
        String compare = "";
        for (String fp : olt.getFlowProfiles()) {
            String[] fps = fp.split(",");
            if (!fps[0].equals(compare)) {
                cbFlowProfile.addItem(fps[0]);
                compare = fps[0];
            }
            if (onu.getFlowProfile() != null && onu.getFlowProfile().equals(fps[0])) {
                cbFlowProfile.setSelectedItem(fps[0]);

            }
        }
        for (String vt : olt.getVlanTranslate()) {
            String[] vtl = vt.split(",");
            cbVtpIpHost.addItem(vtl[0]);
            cbVtpVeip.addItem(vtl[0]);
            cbVtpPbmp.addItem("P1: " + vtl[0] + ";");
            cbVtpPbmp.addItem("P2: " + vtl[0] + ";");
            cbVtpPbmp.addItem("P1: " + vtl[0] + ";P2: " + vtl[0] + ";");
        }
        String brp = "";
        if (onu.getVlanTranslate() != null) {
            for (String vtp : onu.getVlanTranslate()) {
                if (vtp.matches(".*VEIP.*")) {
                    cbVtpVeip.setSelectedItem(vtp.substring(vtp.indexOf("(") + 1, vtp.indexOf(")")));
                }
                if (vtp.matches(".*IPHOST.*")) {
                    cbVtpIpHost.setSelectedItem(vtp.substring(vtp.indexOf("(") + 1, vtp.indexOf(")")));
                }
                if (!vtp.matches(".*IPHOST.*") && !vtp.matches(".*VEIP.*")) {
                    brp = brp.concat("P" + vtp + ";");
                }
            }
        }
        if (brp.matches(".*P1.*") && brp.matches(".*P2.*")) {

            cbVtpPbmp.setSelectedItem(brp);
        } else if (brp.matches(".*P1.*") && !brp.matches(".*P2.*")) {

            cbVtpPbmp.setSelectedItem(brp);
        } else if (!brp.matches(".*P1.*") && brp.matches(".*P2.*")) {

            cbVtpPbmp.setSelectedItem(brp);
        }

    }

    private void provisioningOnu(ONU onu) {

    }

    private void unprovisioningOnu(ONU onu) {

    }

    private void setDefaultPanelBridge(boolean active) {
        //OMCI CONF
        txtAlias.setEditable(active);
        txtMgmtIP.setEditable(active);
        cbFlowProfile.setEnabled(active);
        cbVtpIpHost.setEnabled(active);
        cbVtpVeip.setEnabled(!active);
        cbVtpPbmp.setEnabled(active);

        //ONU CLI CONF
        ckbDhcpWan.setEnabled(!active);
        ckbNat.setEnabled(!active);
        ckbPppoe.setEnabled(!active);
        ckbDhcpRange.setEnabled(active);
        txtWanIpAddress.setEnabled(!active);
        txtDefaultGw.setEnabled(active);
        txtPppoeUser.setEnabled(!active);
        txtPppoePass.setEnabled(!active);
        txtLanIp.setEnabled(active);

    }

    private void setDefaultPanelRoute(boolean active) {
        //OMCI CONF
        txtAlias.setEditable(active);
        txtMgmtIP.setEditable(active);
        cbFlowProfile.setEnabled(active);
        cbVtpIpHost.setEnabled(active);
        cbVtpVeip.setEnabled(active);
        cbVtpPbmp.setEnabled(!active);

        //ONU CLI CONF
        ckbDhcpWan.setEnabled(active);
        ckbNat.setEnabled(active);
        ckbPppoe.setEnabled(active);
        ckbDhcpRange.setEnabled(active);
        txtWanIpAddress.setEditable(active);
        txtDefaultGw.setEnabled(active);
        txtPppoeUser.setEnabled(!active);
        txtPppoePass.setEnabled(active);
        txtLanIp.setEnabled(active);

    }

    private void setDhcpWan(boolean active) {

        if (ckbPppoe.isSelected()) {
            setPppoe(true);
            ckbPppoe.setEnabled(!active);
            txtPppoeUser.setEnabled(!active);
            txtPppoePass.setEnabled(!active);
            txtWanIpAddress.setEnabled(!active);
            txtDefaultGw.setEnabled(!active);
        } else {
            ckbPppoe.setEnabled(!active);
            txtPppoeUser.setEnabled(!active);
            txtPppoePass.setEnabled(!active);
            txtWanIpAddress.setEnabled(!active);
            txtDefaultGw.setEnabled(!active);
            setPppoe(false);
        }

    }

    private void setPppoe(boolean active) {
        txtPppoeUser.setEnabled(active);
        txtPppoePass.setEnabled(active);
        txtWanIpAddress.setEnabled(!active);
        txtDefaultGw.setEnabled(!active);
    }

    public ONU getOnu() {
        return onu;
    }

    public boolean validateProvisioning() {
        boolean ok = false;
        if (txtAlias.getText().isEmpty()) {
            JOptionPane.showMessageDialog(pnOnuConf, "");
        }
        return ok;
    }

}
